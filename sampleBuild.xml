<!-- ANT can be found @ http://jakarta.apache.org/ant/index.html -->
<project 
	name="ejb3Demo" default="all" basedir=".">
	
	<!-- Configure your environment in this file -->
    <property file="ant.properties"/>
	
	<!-- Global properties for this build -->
	<property name="app.name" value="ejb3Demo"/>
	<property name="earFile" value="${app.name}.ear" />
	<property name="clientJarFile" value="${app.name}EJBClient.jar" />
	<property name="clientFile" value="${app.name}Client.jar" />
	<property name="ejbFile" value="${app.name}EJB.jar" />
	<property name="queueFillerFile" value="dummyQueueFiller.jar" />
	
	<property name="srcdir" value="src"/>
	<property name="srcdir.ejb" value="src/ejb"/>
	<property name="srcdir.clientJar" value="src/clientJar"/>
	<property name="srcdir.client" value="src/client"/>
	<property name="srcdir.queueFiller" value="src/queueFiller"/>
	<property name="dstdir" value="bin"/>
	<property name="dstdir.ejb" value="bin/ejb"/>
	<property name="dstdir.clientJar" value="bin/clientJar"/>
	<property name="dstdir.client" value="bin/client"/>
	<property name="dstdir.queueFiller" value="bin/queueFiller"/>
	<property name="impdir" value="lib"/>
	<property name="impdir.ear" value="lib/ear"/>
	<property name="impdir.queueFiller" value="lib/queueFiller"/>
	<property name="impdir.compile" value="lib/compile"/>
	<property name="distdir" value="dist"/>
	<property name="distdir.ear" value="dist/ear"/>
	<property name="distdir.queueFiller" value="dist/queueFiller"/>
	<property name="resdir" value="res"/>
	<property name="resdir.client" value="res/client"/>
	<property name="resdir.ear" value="res/ear"/>
	<property name="resdir.ejb" value="res/ejb"/>
	<property name="resdir.queueFiller" value="res/queueFiller"/>
	<property name="docdir" value="doc/api"/>

	<!-- App Server Targets -->
	<presetdef name="asadmin">
			<java jar="${javaee.home}/modules/admin-cli.jar" fork="true" jvm="${java.home}/bin/java" >
				<arg line="--port ${javaee.adminserver.port} --user admin --passwordfile passfile" />
			</java>
	</presetdef>
		
	<target name="start-glassfish">
			<asadmin failonerror="true">
				<arg value="start-domain" />
			</asadmin>
        	<waitfor>
            	<http url="http://${javaee.server.name}:${javaee.server.port}"/>
        	</waitfor>
	</target>
	
    <target name="stop-glassfish">
        <asadmin failonerror="true">
            <arg line="stop-domain"/>
        </asadmin>
    </target>
	
    <target name="restart-glassfish" depends="stop-glassfish, start-glassfish" />
	
	<target name="deploy">
		<asadmin failonerror="true">
			<arg value="deploy" />
			<arg value="--force=true" />
			<arg value="${distdir.ear}/${earFile}" />
		</asadmin>
	</target>

	<target name="undeploy">
		<asadmin failonerror="true">
			<arg value="undeploy" />
			<arg value="${app.name}" />
		</asadmin>
	</target>

	<target name="redeploy" depends="undeploy,deploy" />
	
	<!-- JMS Targets -->   
    <target name="create-jms-resource">
        <asadmin failonerror="true">
            <arg line="create-jms-resource"/>
            <arg line=" --restype ${jms.restype}" />
            <arg line=" --enabled=true" />
            <arg line=" --property ${jms.resource.property}" />
            <arg line=" ${jms.resource.name}" />
        </asadmin>
    </target>
	
    <target name="delete-jms-resource">
        <asadmin failonerror="false">
            <arg line="delete-jms-resource"/>
            <arg line=" ${jms.resource.name}" />
        </asadmin>
    </target>
		
	<!-- JDBC Targets -->
    <target name="create-jdbc-connection-pool">
        <asadmin failonerror="true">
            <arg line=" create-jdbc-connection-pool"/>
            <arg line=" --datasourceclassname ${db.datasource}" />
            <arg line=" --restype javax.sql.XADataSource " />
            <arg line=" --property portNumber=${db.port}:serverName=${db.server.name}:User=${db.user}:Password=${db.password}:databaseName=${db.name}" />
            <arg line=" ${jdbc.connectionpool.name} " />
        </asadmin> 
    </target>
        	
    <target name="create-jdbc-resource">
        <asadmin failonerror="true">
            <arg line="create-jdbc-resource"/>
            <arg line=" --connectionpoolid ${jdbc.connectionpool.name}" />
            <arg line=" --enabled=true" />
            <arg line=" ${jdbc.resource.name}" />
        </asadmin>     
    </target>
	
    <target name="delete-jdbc-connection-pool">
        <asadmin failonerror="false">
            <arg line="delete-jdbc-connection-pool"/>
            <arg line=" ${jdbc.connectionpool.name}" />
        </asadmin>
    </target>
	
    <target name="delete-jdbc-resource">
        <asadmin failonerror="false">
            <arg line="delete-jdbc-resource"/>
            <arg line=" ${jdbc.resource.name}" />
        </asadmin>
    </target>
        	
	<!-- Build Targets -->
	<target name="init" depends="clean">
		<mkdir dir="${dstdir}"/>
		<mkdir dir="${dstdir.ejb}"/>
		<mkdir dir="${dstdir.clientJar}"/>
		<mkdir dir="${dstdir.client}"/>
		<mkdir dir="${dstdir.queueFiller}"/>
		<mkdir dir="${distdir}"/>
		<mkdir dir="${distdir.ear}"/>
		<mkdir dir="${distdir.queueFiller}"/>
	
		<antcall target="create-jms-resource">
			<param name="jms.restype" value="javax.jms.Queue" />
	        <param name="jms.resource.property" value="Name=PhysicalQueue" />
	        <param name="jms.resource.name" value="${app.jms.queue}" />
	    </antcall>

		<antcall target="create-jms-resource">
	        <param name="jms.restype" value="javax.jms.QueueConnectionFactory" />
	    	<param name="jms.resource.property" value="transaction-support=XATransaction" />
	        <param name="jms.resource.name" value="${app.jms.factory}" />
	    </antcall>

		<antcall target="create-jdbc-connection-pool">
			<param name="jdbc.connectionpool.name" value="${app.jdbc.connectionpool}" />
	    </antcall>
	
		<antcall target="create-jdbc-resource">
	        <param name="jdbc.connectionpool.name" value="${app.jdbc.connectionpool}" />
			<param name="jdbc.resource.name" value="${app.jdbc.resource}" />
	    </antcall>
	</target>
	
	<target name="compile" depends="init">
		<!-- compile clientJar sources -->
		<javac srcdir="${srcdir.clientJar}" destdir="${dstdir.clientJar}/" deprecation="Off" debug="on" includeantruntime="false">
			<include name="**/*.java"/>
			<exclude name="**/.svn/*"/>
			<classpath>
				<fileset dir="${impdir.compile}">
					<include name="**/*.jar"/>
					<include name="**/*.zip"/>
				</fileset>
			</classpath>
		</javac>
		
		<!-- compile queueFiller -->
		<javac srcdir="${srcdir.queueFiller}" destdir="${dstdir.queueFiller}/" deprecation="Off" debug="on" includeantruntime="false">
			<include name="**/*.java"/>
			<exclude name="**/.svn/*"/>
			<classpath>
				<fileset dir="${impdir.queueFiller}">
					<include name="**/*.jar"/>
					<include name="**/*.zip"/>
				</fileset>
				<pathelement location="${dstdir.clientJar}"/>
			</classpath>
		</javac>
		
		
		<!-- compile ejb sources -->
		<javac srcdir="${srcdir.ejb}" destdir="${dstdir.ejb}/" deprecation="Off" debug="on" includeantruntime="false">
			<include name="**/*.java"/>
			<exclude name="**/.svn/*"/>
			<classpath>
				<fileset dir="${impdir.compile}">
					<include name="**/*.jar"/>
					<include name="**/*.zip"/>
				</fileset>
				<pathelement location="${dstdir.clientJar}"/>				
			</classpath>
		</javac>
		
		<!-- compile client sources -->
		<javac srcdir="${srcdir.client}" destdir="${dstdir.client}/" deprecation="Off" debug="on" includeantruntime="false">
			<include name="**/*.java"/>
			<exclude name="**/.svn/*"/>
			<classpath>
				<fileset dir="${impdir.compile}">
					<include name="**/*.jar"/>
					<include name="**/*.zip"/>
				</fileset>
				<pathelement location="${dstdir.clientJar}"/>		
			</classpath>
		</javac>
	</target>

	<target name="clean">
		<delete failonerror="false" verbose="true" includeEmptyDirs="true" dir="${dstdir}"/>
		<delete failonerror="false" verbose="true" includeemptydirs="true" dir="${distdir}"/>
		<delete failonerror="false" verbose="true" includeemptydirs="true" dir="${docdir}"/>
		
		<!-- JMS -->
		<antcall target="delete-jms-resource">
			<param name="jms.resource.name" value="${app.jms.queue}" />
		</antcall>
	
		<antcall target="delete-jms-resource">
			<param name="jms.resource.name" value="${app.jms.factory}" />
		</antcall>
		<!-- JDBC -->
		<antcall target="delete-jdbc-resource">
			<param name="jdbc.resource.name" value="${app.jdbc.resource}" />
		</antcall>
				
		<antcall target="delete-jdbc-connection-pool">
			<param name="jdbc.connectionpool.name" value="${app.jdbc.connectionpool}" />
		</antcall>
	</target>

	<target name="distQueueFiller">
	    <!-- build the queueFiller -->
		<jar manifest="${resdir.queueFiller}/MANIFEST.MF" destfile="${distdir.queueFiller}/${queueFillerFile}" basedir="${dstdir.queueFiller}/">
			<include name="**/DummyQueueFiller.class"/>
		</jar>
		<copy todir="${distdir.queueFiller}/lib" >
			<!-- fileset dir="${basedir}">
				<include name="${impdir.queueFiller}/**/*.jar"/>
			</fileset-->
			<fileset dir="${impdir.queueFiller}">
				<include name="**/*.jar"/>
			</fileset>
		</copy>
		<copy todir="${distdir.queueFiller}">
			<fileset dir="${resdir.queueFiller}">
				<include name="startDummyQueueFiller.bat"/>
				<include name="log4j.xml"/>
				<include name="res_dqf.props"/>
				<include name="jndi.properties"/>
				<include name="testData.txt"/>
			</fileset>
		</copy>
		<copy todir="${distdir.queueFiller}/lib">
			<fileset dir="${distdir.ear}">
				<include name="${clientJarFile}"/>
			</fileset>
		</copy>		
	</target>
	
	<target name="distEar">
		<!-- create clientJar jar -->
		<jar destfile="${distdir.ear}/${clientJarFile}" basedir="${dstdir.clientJar}/">
			<include name="**/*.class"/>
		</jar>
		
		<!-- create ejb jar -->
		<jar manifest="${resdir.ejb}/MANIFEST.MF" destfile="${distdir.ear}/${ejbFile}" basedir="${dstdir.ejb}/">
			<metainf dir="${resdir.ejb}">
				<include name="persistence.xml" />
				<include name="orm.xml" />
				<include name="ejb-jar.xml" />
				<include name="sun-ejb-jar.xml" />
			</metainf>
		</jar>
		<!-- create app client jar -->
		<jar manifest="${resdir.client}/MANIFEST.MF" destfile="${distdir.ear}/${clientFile}" basedir="${dstdir.client}/">
			<include name="**/*.class"/>
		</jar>
			
		<!-- create ear -->
		<ear destfile="${distdir.ear}/${earFile}" appxml="${resdir.ear}/application.xml">
			<fileset dir="${distdir.ear}">
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="${resdir.ear}">
				<include name="lib/**/*"/>
			</fileset>
		</ear>
	</target>
	
	<target name="dist" depends="compile,distEar,distQueueFiller"/>
	
	<target name="dist_only">
		<jar destfile="${distdir}/${dist_file}" basedir="${dstdir}/"/>
	</target>

	<target name="doc">
		<!-- clean the documentation dir. create it first for the case it does not exist -->
		<mkdir dir="${docdir}"/>
		<delete verbose="Off" includeEmptyDirs="true">
			<fileset dir="${docdir}/"/>
		</delete>
		<mkdir dir="${docdir}"/>
		<!-- create documentation -->
		<javadoc
			packagenames="de.uniba.wiai.lspi.*"

			sourcepath="${srcdir}"
			destdir="${docdir}"
			author="true"
			version="true"
			windowtitle="">

			<classpath>
				<fileset dir="${impdir}">
					<include name="**/*.jar"/>
					<include name="**/*.zip"/>
				</fileset>
			</classpath>
		</javadoc>
	</target>

	<!-- Target to create all: class-files, queueFiller app and ear -->
	<target name="all" depends="dist"/>

</project>